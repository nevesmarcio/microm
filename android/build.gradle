//apply plugin: "android"

android {
    buildToolsVersion "29.0.1"
    compileSdkVersion 28
    sourceSets {
        main {
//            manifest.srcFile 'AndroidManifest.xml'
//            java.srcDirs = ['src']
//            aidl.srcDirs = ['src']
//            renderscript.srcDirs = ['src']
//            res.srcDirs = ['res']
//            assets.srcDirs = ['src/main/assets', '../assets']
            assets.srcDirs +=  '../assets'
            jniLibs.srcDirs = ['jniLibs']
        }

        androidTest.setRoot('tests')
    }
    defaultConfig {
        applicationId "pt.me.microm"
        minSdkVersion 27
        targetSdkVersion 28
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
//        disable 'InvalidPackage'
//        abortOnError false
//        absolutePaths false
        lintConfig file('lint.xml')
    }
}
// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    file("jniLibs/armeabi/").mkdirs();
    file("jniLibs/armeabi-v7a/").mkdirs();
    file("jniLibs/arm64-v8a/").mkdirs();
    file("jniLibs/x86_64/").mkdirs();
    file("jniLibs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("jniLibs/arm64-v8a")
        if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("jniLibs/armeabi-v7a")
        if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("jniLibs/armeabi")
        if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("jniLibs/x86_64")
        if (jar.name.endsWith("natives-x86.jar")) outputDir = file("jniLibs/x86")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}
task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'pt.me.microm/pt.me.microm.MainActivity'
}

dependencies {
    //logback dependencies
    implementation 'com.github.tony19:logback-android:2.0.0'

    // android specific local libs
    implementation fileTree(dir: 'libs', include: '*.jar')
}